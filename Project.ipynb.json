{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Investigate a Dataset (Replace this with something more specific!)\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "> This dataset collects information from 100k medical appointments in Brazil and is focused on the question of whether or not patients show up for their appointment. A number of characteristics about the patient are included in each row. (Udacity)\n",
    "\n",
    "> I think the best field to practice Data Analysis is Health Field, and for that, I choose \"No-Show Appointments\" dataset   <br/> And I'm aiming at the end of this project to specify some features that can help to determine whether the next patient will show up for his next appointment or not. My questions are as next:\n",
    "- Which gender is more likely to miss the appointment?\n",
    "- Are patinets with Hypertension, Diabetes, Alcoholism, or Handicap likely to come?\n",
    "- Which day of the week patients more likely to not show up for their appointments?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "sns.set_style('darkgrid')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n",
    "\n",
    "### General Properties\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "      <th>No-show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.589978e+14</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T16:08:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.262962e+12</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:19:04Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.679512e+11</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T17:29:31Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.841186e+12</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:07:23Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      PatientId  AppointmentID Gender          ScheduledDay  \\\n",
       "0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
       "1  5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n",
       "2  4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n",
       "3  8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n",
       "4  8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n",
       "\n",
       "         AppointmentDay  Age      Neighbourhood  Scholarship  Hipertension  \\\n",
       "0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n",
       "1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n",
       "2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n",
       "3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n",
       "4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n",
       "\n",
       "   Diabetes  Alcoholism  Handcap  SMS_received No-show  \n",
       "0         0           0        0             0      No  \n",
       "1         0           0        0             0      No  \n",
       "2         0           0        0             0      No  \n",
       "3         0           0        0             0      No  \n",
       "4         1           0        0             0      No  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load the dataset using read_csv from pandas, and show head of the dataset\n",
    "df = pd.read_csv('noshowappointments-kagglev2-may-2016.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Data Dictionary for this Dataset is powered by (Kaggel):\n",
    "- PatientId - Identification of a patient.\n",
    "- AppointmentID - Identification of each appointment.\n",
    "- Gender = Male or Female.\n",
    "- DataMarcacaoConsulta = The day of the actual appointment when they have to visit the doctor.\n",
    "- DataAgendamento = The day someone called or registered the appointment, this is before appointment of course.\n",
    "- Age = How old is the patient.\n",
    "- Neighbourhood = Where the appointment takes place.\n",
    "- Scholarship = Ture of False. Is the patient within the Brazilian wealth care system (Bolsa FamÃ­lia) or not.\n",
    "- Hipertension = True or False.\n",
    "- Diabetes = True or False.\n",
    "- Alcoholism = True or False.\n",
    "- Handcap = True or False.\n",
    "- SMS_received = 1 or more messages sent to the patient.\n",
    "- No-show = \"Yes\" represents the absence of the patient. \"No\" represent the attendance.\n",
    "\n",
    "> In the header, they used the Upper and Lower case to write the name of the columns, except that there is some error in that:\n",
    "- Column *\"PatinetId\"* is written with differnet style than *\"AppointmentID\"*. The second is more prefare to read and used.\n",
    "- Column *\"No-show\"* use dash instead of Upper and Lower Case.\n",
    "- There are missspiling in columns *\"Hipertension\"* and *\"Handcap\"*.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 14 columns):\n",
      "PatientId         110527 non-null float64\n",
      "AppointmentID     110527 non-null int64\n",
      "Gender            110527 non-null object\n",
      "ScheduledDay      110527 non-null object\n",
      "AppointmentDay    110527 non-null object\n",
      "Age               110527 non-null int64\n",
      "Neighbourhood     110527 non-null object\n",
      "Scholarship       110527 non-null int64\n",
      "Hipertension      110527 non-null int64\n",
      "Diabetes          110527 non-null int64\n",
      "Alcoholism        110527 non-null int64\n",
      "Handcap           110527 non-null int64\n",
      "SMS_received      110527 non-null int64\n",
      "No-show           110527 non-null object\n",
      "dtypes: float64(1), int64(8), object(5)\n",
      "memory usage: 11.8+ MB\n"
     ]
    }
   ],
   "source": [
    "# to show informations regarding the dataset\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> From the data above, we can tell that:\n",
    "- There is **NOT** any missing value in this dataset.\n",
    "- There is **14** columns and **110527** rows\\entries.\n",
    "- Column *\"PatinetId\"* have data type (float) while column *\"AppointmentID\"* have (int).\n",
    "- Columns *\"ScheduledDay\"* and *\"AppointmentDay\"* stored their value in (object) instead of (date)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to check for duplicated \n",
    "sum(df.duplicated())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the dataset has no duplicated rows."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning \n",
    "#### Rename Columns\n",
    "> To start our Data Cleaning journy we need to rename the columns listed below:\n",
    "- Column *\"PatinetId\"* is written with differnet style than *\"AppointmentID\"*. The second is more prefare to read and used.\n",
    "- Columns *\"No-show\"* and *\"SMS_received\"* use dash\\underscore instead of Upper and Lower Case.\n",
    "- There are missspiling in columns *\"Hipertension\"* and *\"Handcap\"*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename PatientId, Hipertension, Handcap, No-show, SMS_received\n",
    "df.rename(columns={'PatientId':'PatinetID', 'Hipertension':'Hypertension', 'Handcap':'Handicap',\n",
    "                   'No-show':'NoShow', 'SMS_received':'SMSReceived'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatinetID</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handicap</th>\n",
       "      <th>SMSReceived</th>\n",
       "      <th>NoShow</th>\n",
       "      <th>ScheduledDayOfWeek</th>\n",
       "      <th>AppointmentDayOfWeek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29 18:38:08</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PatinetID  AppointmentID Gender        ScheduledDay AppointmentDay  \\\n",
       "0  29872499824296        5642903      F 2016-04-29 18:38:08     2016-04-29   \n",
       "\n",
       "   Age    Neighbourhood  Scholarship  Hypertension  Diabetes  Alcoholism  \\\n",
       "0   62  JARDIM DA PENHA            0             1         0           0   \n",
       "\n",
       "   Handicap  SMSReceived NoShow ScheduledDayOfWeek AppointmentDayOfWeek  \n",
       "0         0            0     No             Friday               Friday  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1) # to check the new columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fix Columns Data Type\n",
    "> To start our Data Cleaning journy we need to rename the columns listed below:\n",
    "- Column \"PatinetId\" have data type (float) while column \"AppointmentID\" have (int).\n",
    "- Columns \"ScheduledDay\" and \"AppointmentDay\" stored their value in (object) instead of (date)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change PatientID data type from float to int.\n",
    "df['PatinetID'] = df.PatinetID.astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above cell, PatientID data type change from float to int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change data type for ScheduledDay and AppointmentDay from object to datetime64\n",
    "df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).astype('datetime64[ns]')\n",
    "df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).astype('datetime64[ns]')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above cell, ScheduledDay and AppointmentDay has been changed from object to datetime64."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 16 columns):\n",
      "PatinetID               110527 non-null int64\n",
      "AppointmentID           110527 non-null int64\n",
      "Gender                  110527 non-null object\n",
      "ScheduledDay            110527 non-null datetime64[ns]\n",
      "AppointmentDay          110527 non-null datetime64[ns]\n",
      "Age                     110527 non-null int64\n",
      "Neighbourhood           110527 non-null object\n",
      "Scholarship             110527 non-null int64\n",
      "Hypertension            110527 non-null int64\n",
      "Diabetes                110527 non-null int64\n",
      "Alcoholism              110527 non-null int64\n",
      "Handicap                110527 non-null int64\n",
      "SMSReceived             110527 non-null int64\n",
      "NoShow                  110527 non-null object\n",
      "ScheduledDayOfWeek      110527 non-null object\n",
      "AppointmentDayOfWeek    110527 non-null object\n",
      "dtypes: datetime64[ns](2), int64(9), object(5)\n",
      "memory usage: 13.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info() # show information about dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check for the changed columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Add Columns to Dataset\n",
    "> To answer one of the above questions, two columns need to be added to the dataset as:\n",
    "- *ScheduledDayOfWeek* columns to specify which day of the week the patient schedule an appointmnet.\n",
    "- *AppointmentDayOfWeek* columns to specify which day of the week the appointment is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatinetID</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handicap</th>\n",
       "      <th>SMSReceived</th>\n",
       "      <th>NoShow</th>\n",
       "      <th>ScheduledDayOfWeek</th>\n",
       "      <th>AppointmentDayOfWeek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29 18:38:08</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PatinetID  AppointmentID Gender        ScheduledDay AppointmentDay  \\\n",
       "0  29872499824296        5642903      F 2016-04-29 18:38:08     2016-04-29   \n",
       "\n",
       "   Age    Neighbourhood  Scholarship  Hypertension  Diabetes  Alcoholism  \\\n",
       "0   62  JARDIM DA PENHA            0             1         0           0   \n",
       "\n",
       "   Handicap  SMSReceived NoShow ScheduledDayOfWeek AppointmentDayOfWeek  \n",
       "0         0            0     No             Friday               Friday  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to add new columns (day of week)\n",
    "df['ScheduledDayOfWeek'] = df.ScheduledDay.dt.weekday_name\n",
    "df['AppointmentDayOfWeek'] = df.ScheduledDay.dt.weekday_name\n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Checking\n",
    "> Using Unique() function to confirm that all data in this dataset make sence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender:  ['F' 'M']\n"
     ]
    }
   ],
   "source": [
    "print(\"Gender: \", np.sort(df.Gender.unique())) # sorting the unique data of gender to confirm if it's ok or not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gender in this dataset set either Female or Male."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age:  [ -1   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n",
      "  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34\n",
      "  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52\n",
      "  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70\n",
      "  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88\n",
      "  89  90  91  92  93  94  95  96  97  98  99 100 102 115]\n"
     ]
    }
   ],
   "source": [
    "print(\"Age: \", np.sort(df.Age.unique())) # sorting the unique data of age to confirm if it's ok or not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Age column have (-1) which is not a valid value, and to make sure we gonna run the below statment to make sure that it's a human error in data entery level:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatinetID</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handicap</th>\n",
       "      <th>SMSReceived</th>\n",
       "      <th>NoShow</th>\n",
       "      <th>ScheduledDayOfWeek</th>\n",
       "      <th>AppointmentDayOfWeek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>99832</th>\n",
       "      <td>465943158731293</td>\n",
       "      <td>5775010</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-06 08:58:13</td>\n",
       "      <td>2016-06-06</td>\n",
       "      <td>-1</td>\n",
       "      <td>ROMÃO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             PatinetID  AppointmentID Gender        ScheduledDay  \\\n",
       "99832  465943158731293        5775010      F 2016-06-06 08:58:13   \n",
       "\n",
       "      AppointmentDay  Age Neighbourhood  Scholarship  Hypertension  Diabetes  \\\n",
       "99832     2016-06-06   -1         ROMÃO            0             0         0   \n",
       "\n",
       "       Alcoholism  Handicap  SMSReceived NoShow ScheduledDayOfWeek  \\\n",
       "99832           0         0            0     No             Monday   \n",
       "\n",
       "      AppointmentDayOfWeek  \n",
       "99832               Monday  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query('Age == \"-1\"') # to query rows with age = -1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And to fix that isuue we gonna drop the row."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(index=99832, inplace=True) # drop rows with index = 99842 and age = -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatinetID</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handicap</th>\n",
       "      <th>SMSReceived</th>\n",
       "      <th>NoShow</th>\n",
       "      <th>ScheduledDayOfWeek</th>\n",
       "      <th>AppointmentDayOfWeek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [PatinetID, AppointmentID, Gender, ScheduledDay, AppointmentDay, Age, Neighbourhood, Scholarship, Hypertension, Diabetes, Alcoholism, Handicap, SMSReceived, NoShow, ScheduledDayOfWeek, AppointmentDayOfWeek]\n",
       "Index: []"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query('Age == \"-1\"') # query again for age = -1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After double checking it's seems that everything OK and we can continue our work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Neighbourhood :  ['AEROPORTO' 'ANDORINHAS' 'ANTÃNIO HONÃRIO' 'ARIOVALDO FAVALESSA'\n",
      " 'BARRO VERMELHO' 'BELA VISTA' 'BENTO FERREIRA' 'BOA VISTA' 'BONFIM'\n",
      " 'CARATOÃRA' 'CENTRO' 'COMDUSA' 'CONQUISTA' 'CONSOLAÃÃO' 'CRUZAMENTO'\n",
      " 'DA PENHA' 'DE LOURDES' 'DO CABRAL' 'DO MOSCOSO' 'DO QUADRO'\n",
      " 'ENSEADA DO SUÃ' 'ESTRELINHA' 'FONTE GRANDE' 'FORTE SÃO JOÃO' 'FRADINHOS'\n",
      " 'GOIABEIRAS' 'GRANDE VITÃRIA' 'GURIGICA' 'HORTO' 'ILHA DAS CAIEIRAS'\n",
      " 'ILHA DE SANTA MARIA' 'ILHA DO BOI' 'ILHA DO FRADE' 'ILHA DO PRÃNCIPE'\n",
      " 'ILHAS OCEÃNICAS DE TRINDADE' 'INHANGUETÃ' 'ITARARÃ' 'JABOUR'\n",
      " 'JARDIM CAMBURI' 'JARDIM DA PENHA' 'JESUS DE NAZARETH' 'JOANA DÂ´ARC'\n",
      " 'JUCUTUQUARA' 'MARIA ORTIZ' 'MARUÃPE' 'MATA DA PRAIA' 'MONTE BELO'\n",
      " 'MORADA DE CAMBURI' 'MÃRIO CYPRESTE' 'NAZARETH' 'NOVA PALESTINA'\n",
      " 'PARQUE INDUSTRIAL' 'PARQUE MOSCOSO' 'PIEDADE' 'PONTAL DE CAMBURI'\n",
      " 'PRAIA DO CANTO' 'PRAIA DO SUÃ' 'REDENÃÃO' 'REPÃBLICA' 'RESISTÃNCIA'\n",
      " 'ROMÃO' 'SANTA CECÃLIA' 'SANTA CLARA' 'SANTA HELENA' 'SANTA LUÃZA'\n",
      " 'SANTA LÃCIA' 'SANTA MARTHA' 'SANTA TEREZA' 'SANTO ANDRÃ' 'SANTO ANTÃNIO'\n",
      " 'SANTOS DUMONT' 'SANTOS REIS' 'SEGURANÃA DO LAR' 'SOLON BORGES'\n",
      " 'SÃO BENEDITO' 'SÃO CRISTÃVÃO' 'SÃO JOSÃ' 'SÃO PEDRO' 'TABUAZEIRO'\n",
      " 'UNIVERSITÃRIO' 'VILA RUBIM']\n"
     ]
    }
   ],
   "source": [
    "print(\"Neighbourhood : \", np.sort(df.Neighbourhood.unique())) # sorting the unique data of neighbourhood to confirm if it's ok or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Neighbourhood Count:  81\n"
     ]
    }
   ],
   "source": [
    "print(\"Neighbourhood Count: \", np.count_nonzero(df.Neighbourhood.unique())) # count of neighbourhood"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scholarship :  [0 1]\n"
     ]
    }
   ],
   "source": [
    "print(\"Scholarship : \", np.sort(df.Scholarship.unique())) # sorting the unique data of scholarship to confirm if it's ok or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hypertension :  [0 1]\n",
      "\n",
      "Diabetes :  [0 1]\n",
      "\n",
      "Alcoholism :  [0 1]\n",
      "\n",
      "Handicap :  [0 1 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "# sorting the unique data of conditions to confirm if it's ok or not\n",
    "print(\"Hypertension : \", np.sort(df.Hypertension.unique()))\n",
    "print(\"\\nDiabetes : \", np.sort(df.Diabetes.unique()))\n",
    "print(\"\\nAlcoholism : \", np.sort(df.Alcoholism.unique()))\n",
    "print(\"\\nHandicap : \", np.sort(df.Handicap.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SMSReceived :  [0 1]\n"
     ]
    }
   ],
   "source": [
    "print(\"SMSReceived : \", np.sort(df.SMSReceived.unique())) # sorting the unique data of sms received to confirm if it's ok or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NoShow :  ['No' 'Yes']\n"
     ]
    }
   ],
   "source": [
    "print(\"NoShow : \", np.sort(df.NoShow.unique())) # sorting the unique data of no show to confirm if it's ok or not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So far so good, every columns seems to have the right entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ScheduledDayOfWeek :  ['Friday' 'Monday' 'Saturday' 'Thursday' 'Tuesday' 'Wednesday']\n",
      "\n",
      "AppointmentDayOfWeek :  ['Friday' 'Monday' 'Saturday' 'Thursday' 'Tuesday' 'Wednesday']\n"
     ]
    }
   ],
   "source": [
    "# sorting the unique data of day of week to confirm if it's ok or not\n",
    "print(\"ScheduledDayOfWeek : \", np.sort(df.ScheduledDayOfWeek.unique()))\n",
    "print(\"\\nAppointmentDayOfWeek : \", np.sort(df.AppointmentDayOfWeek.unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These two columns are the last two in this dataset and they give the right entries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "\n",
    "#### Which gender is more likely to miss the appointment?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To answer this question, we need to split the dataset into two seperate parts and count for each gender."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F    14594\n",
       "Name: Gender, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dataframe with gender = female and no show = missing\n",
    "df_Female = df.query('Gender == \"F\" and NoShow == \"Yes\"')\n",
    "Gender_F = df_Female['Gender'].value_counts() # count the values of gender\n",
    "Gender_F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M    7725\n",
       "Name: Gender, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dataframe with gender = male and no show = missing\n",
    "df_Male = df.query('Gender == \"M\" and NoShow == \"Yes\"')\n",
    "Gender_M = df_Male['Gender'].value_counts()\n",
    "Gender_M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie([Gender_F, Gender_M], labels=[\"Female\", \"Male\"]);\n",
    "plt.title(\"Number of Female or Male That Miss Their Appointments\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the chart above, we can answer the question easily. Female patients are more likely to miss their appointments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Are patinets with Hypertension, Diabetes, Alcoholism, or Handicap likely to come?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "F    3168\n",
       "M    1532\n",
       "Name: Age, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dataframe with conditions = 1 and they miss the appointmnet \n",
    "ConditionYES = df.query('(Hypertension == 1 or Diabetes == 1 or Alcoholism == 1 or Handicap == 1) and NoShow == \"Yes\"')\n",
    "ConditionYESCount = ConditionYES.groupby('Gender').count()['Age'] # group by gender\n",
    "ConditionYESCount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "F    14425\n",
       "M     7178\n",
       "Name: Age, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dataframe with conditions = 1 and they attend the appointmnet \n",
    "ConditionNO = df.query('(Hypertension == 1 or Diabetes == 1 or Alcoholism == 1 or Handicap == 1) and NoShow == \"No\"')\n",
    "ConditionNOCount = ConditionNO.groupby('Gender').count()['Age']\n",
    "ConditionNOCount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([1,2])\n",
    "width = 0.3\n",
    "place = ['Female', 'Male']\n",
    "plt.bar(index, ConditionNOCount, width=width, label='Show Up')\n",
    "plt.bar(index + width, ConditionYESCount, width=width, label=\"Doesn't Show Up\")\n",
    "\n",
    "place = index + (width / 2)\n",
    "plt.xticks(place, ['Female', 'Male'])\n",
    "plt.title(\"Patient With Conditions Show Up By Gender\")\n",
    "plt.xlabel(\"Gender\")\n",
    "plt.ylabel(\"Counting of Show Up \\ Not Show Up\")\n",
    "\n",
    "plt.legend(bbox_to_anchor=(1,1));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph shows that Female with condtions show up to their appointmnets more than Male with conditions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Which day of the week patients more likely to not show up for their appointments?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create dataframe with day of the week and count of the patinet miss\\attend the appointmnet \n",
    "dow = df.groupby(['AppointmentDayOfWeek', 'NoShow']).count()['Age']\n",
    "dowMondayNO = dow['Monday', 'No']\n",
    "dowMondayYES = dow['Monday', 'Yes']\n",
    "dowTuesdayNO = dow['Tuesday', 'No']\n",
    "dowTuesdayYES = dow['Tuesday', 'Yes']\n",
    "dowWednesdayNO = dow['Wednesday', 'No']\n",
    "dowWednesdayYES = dow['Wednesday', 'Yes']\n",
    "dowThursdayNO = dow['Thursday', 'No']\n",
    "dowThursdayYES = dow['Thursday', 'Yes']\n",
    "dowFridayNO = dow['Friday', 'No']\n",
    "dowFridayYES = dow['Friday', 'Yes']\n",
    "dowSaturdayNO = dow['Saturday', 'No']\n",
    "dowSaturdayYES = dow['Saturday', 'Yes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([1,2,3,4,5,6])\n",
    "width = 0.3\n",
    "plt.subplots(figsize=(8,6))\n",
    "place = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n",
    "plt.bar(index, [dowMondayNO, dowTuesdayNO, dowWednesdayNO, dowThursdayNO, dowFridayNO, dowSaturdayNO], width=width, label='Show Up')\n",
    "plt.bar(index + width, [dowMondayYES, dowTuesdayYES, dowWednesdayYES, dowThursdayYES, dowFridayYES, dowSaturdayYES], width=width, label=\"Doesn't Show Up\")\n",
    "\n",
    "place = index + (width / 2)\n",
    "plt.xticks(place, ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])\n",
    "plt.title(\"Counting of Show Up \\ Not Show Up Patients By Day\")\n",
    "plt.xlabel(\"Day\")\n",
    "plt.ylabel(\"Counting of Show Up \\ Not Show Up\")\n",
    "plt.legend(bbox_to_anchor=(1,1));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the graph it's clear that pateints likes to go to their appointments during the weekdays not in the weekends"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creat dataframe with sms received but they miss the appointment\n",
    "receivedSMS = df.query('SMSReceived == 1 and NoShow == \"Yes\"')\n",
    "receivedSMS.Age.plot(kind='hist', x='Age', y='Count How Many Patient Miss The Apointments', title=\"Patient with Received SMS Missed the Appointment\", figsize=(8,8));\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Chart shows that patients bewteen 20-30 are most likely to miss their appointments even when they received SMS to remind them of the appointment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='conclusions'></a>\n",
    "## Conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "> The dataset didn't contain any missing values, neither duplicated values. We change PatientId name and data type, also AppointmentDay and SchedulDay. Also we add two more columns to show which day of the week they schedule their appointments. <br/>\n",
    "> One more note, that the dataset doesn't explain more about columns Handicap instead they replace the words with meaningly numbers.<br/>\n",
    ">At the end of this project, we can say that there is relationship between the patient likely to show up and these columns:\n",
    "- Age\n",
    "- Gender\n",
    "- Conditions (Hypertension, Diabetes, Alcoholism, Handicap)<br/>\n",
    ">And from that analysis we can tell that there is majority of female who shedule and show up for their appointments than male pateints. Also pateints tend to show up for their appointments in the first three days of the week."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
